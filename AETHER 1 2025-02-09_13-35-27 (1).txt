package com.example.instagramclone

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.android.gms.tasks.OnCompleteListener
import com.google.android.gms.tasks.OnFailureListener
import com.google.android.gms.tasks.OnSuccessListener
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.Query
import com.google.firebase.firestore.QuerySnapshot
import com.google.firebase.storage.FirebaseStorage
import com.google.firebase.storage.StorageReference
import com.google.firebase.storage.UploadTask
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {

    private val auth = FirebaseAuth.getInstance()
    private val db = FirebaseFirestore.getInstance()
    private val storage = FirebaseStorage.getInstance().reference

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MainScreen(onAuthStateChanged = { isAuthenticated ->
                if (isAuthenticated) {
                    HomeScreen()
                } else {
                    LoginScreen()
                }
            })
        }
    }
}

@Composable
fun MainScreen(onAuthStateChanged: (Boolean) -> Unit) {
    val user = FirebaseAuth.getInstance().currentUser
    LaunchedEffect(key1 = user) {
        onAuthStateChanged(user != null)
    }
}

@Composable
fun LoginScreen() {
    // ... Login UI with email/password, Google, Facebook options
}

@Composable
fun HomeScreen() {
    val user = FirebaseAuth.getInstance().currentUser!! 
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "Welcome, ${user.displayName ?: user.email}",
            fontSize = 24.sp, 
            fontWeight = FontWeight.Bold 
        )
        // Add buttons for navigating to different screens (Feed, Profile, Direct Messages, etc.)
    }
}

// ... Other screens: FeedScreen, ProfileScreen, DirectMessageScreen, StoryScreen, etc.

// Data classes
data class User(
    val uid: String,
    val username: String,
    val email: String?,
    val profileImageUrl: String?
)

data class Post(
    val uid: String,
    val username: String,
    val imageUrl: String,
    val caption: String,
    val timestamp: Long,
    val likes: List<String> = emptyList()
)

data class Comment(
    val uid: String,
    val username: String,
    val text: String,
    val timestamp: Long
)

// ViewModels for managing data and UI state

class FeedViewModel : ViewModel() {
    private val _posts = mutableStateListOf<Post>()
    val posts: List<Post> get() = _posts

    init {
        fetchPosts()
    }

    private fun fetchPosts() {
        viewModelScope.launch {
            db.collection("posts")
                .orderBy("timestamp", Query.Direction.DESCENDING)
                .get()
                .addOnSuccessListener { result ->
                    _posts.clear()
                    for (document in result) {
                        val post = document.toObject(Post::class.java)
                        _posts.add(post)
                    }
                }
                .addOnFailureListener { exception ->
                    Log.w("TAG", "Error getting documents: ", exception)
                }
        }
    }
}

// ... other ViewModels for Profile, Direct Messages, etc.

// ... Implement UI components for each screen using Jetpack Compose

// ... Implement logic for image/video upload, likes, comments, stories, etc.

// ... Implement search functionality

// ... Implement notifications using Firebase Cloud Messaging

// ... Handle user interactions and data updates

// ...